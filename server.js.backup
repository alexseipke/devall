const express = require('express');
const cors = require('cors');
const { Anthropic } = require('@anthropic-ai/sdk');
const { Octokit } = require('@octokit/rest');
require('dotenv').config();
const IntelligentContextManager = require('./context-manager.js');
const app = express();

// Claude API
const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY,
});

// GitHub API
const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN,
});

// Initialize Context Manager
const contextManager = new IntelligentContextManager();
let projectAnalysis = null;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('public'));

// Variables globales
let projectContext = {
  repository: null,
  files: {},
  structure: {},
  analysis: {},
  memory: []
};

// Override loadFile method in contextManager
contextManager.loadFile = async (path) => {
  if (projectContext.files[path]) {
    return projectContext.files[path];
  }
  if (!projectContext.repository) return '';
  try {
    const { data } = await octokit.repos.getContent({
      owner: projectContext.repository.owner,
      repo: projectContext.repository.repo,
      path: path
    });
    const content = Buffer.from(data.content, 'base64').toString('utf-8');
    projectContext.files[path] = content;
    return content;
  } catch (error) {
    console.error(`Error loading file ${path}:`, error.message);
    return '';
  }
};

// Endpoint: Cargar y analizar repositorio
app.post('/api/load-repo', async (req, res) => {
  const { owner, repo } = req.body;
  try {
    console.log(`ğŸ“‚ Loading repository: ${owner}/${repo}`);
    const { data: repoData } = await octokit.repos.get({ owner, repo });
    const { data: tree } = await octokit.git.getTree({
      owner,
      repo,
      tree_sha: repoData.default_branch,
      recursive: true
    });
    
    projectContext.repository = { owner, repo, data: repoData };
    projectContext.structure = tree;
    projectContext.files = {};
    
    // Load essential files for analysis
    const essentialFiles = tree.tree
      .filter(f => f.type === 'blob' && 
        (f.path.endsWith('.js') || f.path.endsWith('.json') || 
         f.path.endsWith('.jsx') || f.path.endsWith('.tsx')))
      .slice(0, 30);
    
    console.log(`ğŸ“¥ Loading ${essentialFiles.length} files for analysis...`);
    for (const file of essentialFiles) {
      await contextManager.loadFile(file.path);
    }
    
    // Store files in context manager and analyze
    contextManager.projectContext.content.files = projectContext.files;
    projectAnalysis = await contextManager.analyzeProject({ tree });
    
    res.json({
      success: true,
      repository: repoData,
      structure: tree,
      analysis: {
        framework: projectAnalysis.metadata.framework,
        language: projectAnalysis.metadata.language,
        patterns: projectAnalysis.analysis.patterns,
        totalFiles: Object.keys(projectAnalysis.content.files).length
      }
    });
  } catch (error) {
    console.error('Error loading repository:', error);
    res.status(500).json({ error: error.message });
  }
});

// Endpoint: Obtener archivo
app.post('/api/get-file', async (req, res) => {
  const { path } = req.body;
  if (!projectContext.repository) {
    return res.status(400).json({ error: 'No repository loaded' });
  }
  
  try {
    const content = await contextManager.loadFile(path);
    
    // Add to recent files
    if (contextManager.addToRecentFiles) {
      contextManager.addToRecentFiles(path);
    }
    
    res.json({
      success: true,
      repository: repoData,
      structure: tree,
      analysis: {
        framework: projectAnalysis.metadata.framework,
        language: projectAnalysis.metadata.language,
        patterns: projectAnalysis.analysis.patterns,
        totalFiles: Object.keys(projectAnalysis.content.files).length
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Endpoint: Chat with intelligent context
app.post('/api/chat', async (req, res) => {
  const { message } = req.body;
  if (!projectContext.repository) {
    return res.status(400).json({ error: 'Please load a repository first' });
  }
  
  try {
    console.log('ğŸ’¬ Building intelligent context...');
    
    // Build intelligent context
    const context = await contextManager.buildContext(message, {
      maxTokens: 30000,
      includeAnalysis: true,
      includeMemory: true
    });
    
    // Create context prompt
    const contextPrompt = `You are analyzing: ${projectContext.repository.owner}/${projectContext.repository.repo}
Framework: ${context.project?.framework || 'Not detected'}
Language: ${context.project?.language || 'Not detected'}
Patterns: ${context.patterns?.map(p => p.type).join(', ') || 'None'}

Relevant code for your query:
${context.relevantFiles?.slice(0, 3).map(f => `File: ${f.path}\n\`\`\`\n${f.content?.substring(0, 1500)}\n\`\`\``).join('\n\n') || 'No specific files identified'}

User query: ${message}`;
    
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4000,
      messages: [{ role: 'user', content: contextPrompt }]
    });
    
    await contextManager.updateMemory({
      query: message,
      response: response.content[0].text
    });
    
    res.json({
      success: true,
      repository: repoData,
      structure: tree,
      analysis: {
        framework: projectAnalysis.metadata.framework,
        language: projectAnalysis.metadata.language,
        patterns: projectAnalysis.analysis.patterns,
        totalFiles: Object.keys(projectAnalysis.content.files).length
      }
    });
  } catch (error) {
    console.error('Error in chat:', error);
    res.status(500).json({ error: error.message });
  }
});

// Endpoint: Analyze project health
app.get('/api/analyze-health', async (req, res) => {
  if (!projectAnalysis) {
    return res.status(400).json({ error: 'No project loaded' });
  }
  try {
    const health = await contextManager.analyzeProjectHealth();
    res.json(health);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

const PORT = process.env.PORT || 3005;
app.listen(PORT, () => {
  console.log(`ğŸš€ devall.app server running on port ${PORT}`);
  console.log(`ğŸ§  Intelligent Context Manager loaded`);
});
